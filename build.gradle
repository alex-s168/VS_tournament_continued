plugins {
    // Needed for Forge+Fabric
    id "architectury-plugin" version "$architectury_plugin_version"
    id "dev.architectury.loom" version "$architectury_loom_version" apply false
    // Kotlin
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version" apply false
    // Kotlin linter
    id "org.jlleitschuh.gradle.ktlint" version "10.3.0"
    // Java linter
    id "checkstyle"

    id 'com.matthewprenger.cursegradle' version '1.4.0' apply false
    id "com.modrinth.minotaur" version "2.4.5" apply false
}

String gitRevision = "git rev-parse HEAD".execute().text.trim()
if (gitRevision.length() == 0) {
    version = Tournament_version
}
else {
    version = Tournament_version + '+' + gitRevision.substring(0, 10)
}

architectury {
    minecraft = minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    // Apply checkstyle and ktlint to check the code style of every sub project
    apply plugin: "org.jlleitschuh.gradle.ktlint"
    apply plugin: "checkstyle"
    apply plugin: "org.jetbrains.kotlin.jvm"

    loom {
        silentMojangMappingsLicense()
    }

    repositories {
        maven {
            name = "ParchmentMC"
            url = "https://maven.parchmentmc.org"
        }
    }

    dependencies {
        minecraft("com.mojang:minecraft:$minecraft_version")
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings(loom.layered {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-$minecraft_version:$parchment_version@zip")
        })

        implementation("org.joml:joml:1.10.4") { transitive = false }
        implementation("org.joml:joml-primitives:1.10.0") { transitive = false }
    }

    checkstyle {
        // configure to use checkstyle v8.41
        toolVersion "8.41"
        // Gradle shouldn't fail builds on checkstyle errors
        ignoreFailures = true
        // Checkstyle config file is in .checkstyle/checkstyle.xml
        configFile = file("${rootDir}/.checkstyle/checkstyle.xml")
    }

    // configure checkstyle, but different
    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    tasks.withType(Checkstyle).configureEach {
        reports {
            // Do not output html reports
            html.required = false
            // Output xml reports
            xml.required = true
        }
    }

    // configure ktlint
    ktlint {
        ignoreFailures = true
        reporters {
            // configure to output in checkstyle XML format
            reporter "checkstyle"
        }
    }

    kotlin {
        jvmToolchain(jvm_version.toInteger())
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.version
    group = rootProject.maven_group

    repositories {
        mavenLocal()
        maven {
            name = "Valkyrien Skies Internal"
            url = project.vs_maven_url ?: 'https://maven.valkyrienskies.org'
            if (project.vs_maven_username && project.vs_maven_password) {
                credentials {
                    username = project.vs_maven_username
                    password = project.vs_maven_password
                }
            }
        }
        maven {
            name = 'Kotlin for Forge'
            url = 'https://thedarkcolour.github.io/KotlinForForge/'
            content { includeGroup "thedarkcolour" }
        }
        maven {
            url 'https://jitpack.io'
        }
        maven {
            url "https://cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
        maven { url = "https://api.modrinth.com/maven" }
        maven {
            name = "alex's repo"
            url = uri("http://198.7.115.119:8080/libs")
            allowInsecureProtocol = true
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"

        options.release = jvm_version.toInteger()
    }

    java {
        withSourcesJar()
    }
}

tasks.register('copyJars') {
    doLast {
        def bl = new File(projectDir, "build/libs")
        copy {
            from new File(projectDir, "forge/build/libs/tournament-${version}.jar")
            into bl
            rename { String ignored ->
                "tournament-forge-${version}.jar"
            }
        }
        copy {
            from new File(projectDir, "fabric/build/libs/tournament-${version}.jar")
            into bl
            rename { String ignored ->
                "tournament-fabric-${version}.jar"
            }
        }
    }
}
